// Generated by ReScript, PLEASE EDIT WITH CARE

import * as CssJs from "bs-css-emotion/src/CssJs.mjs";
import * as Curry from "rescript/lib/es6/curry.js";
import * as React from "react";
import * as Caml_option from "rescript/lib/es6/caml_option.js";

function getValue(e) {
  return e.currentTarget.value;
}

var deleteProp = ((newProps, key) => delete newProps[key]);

function getOrEmpty(str) {
  if (str !== undefined) {
    return " " + str;
  } else {
    return "";
  }
}

var styles = CssJs.style([
      CssJs.label("Container"),
      CssJs.boxSizing("borderBox"),
      CssJs.display("flex"),
      CssJs.unsafe("alignItems", "center"),
      CssJs.width({
            NAME: "percent",
            VAL: 100
          }),
      CssJs.height({
            NAME: "pxFloat",
            VAL: 50
          })
    ]);

function make(props) {
  var className = styles + getOrEmpty(Caml_option.undefined_to_opt(props.className));
  var stylesObject = {
    className: className,
    ref: Caml_option.undefined_to_opt(props.innerRef)
  };
  var newProps = Object.assign({}, props, stylesObject);
  deleteProp(newProps, "innerRef");
  return React.createElement("div", newProps);
}

var Container = {
  deleteProp: deleteProp,
  getOrEmpty: getOrEmpty,
  styles: styles,
  make: make
};

var deleteProp$1 = ((newProps, key) => delete newProps[key]);

function getOrEmpty$1(str) {
  if (str !== undefined) {
    return " " + str;
  } else {
    return "";
  }
}

var styles$1 = CssJs.style([
      CssJs.label("Input"),
      CssJs.margin("zero"),
      CssJs.padding2("zero", {
            NAME: "pxFloat",
            VAL: 12
          }),
      CssJs.width({
            NAME: "percent",
            VAL: 100
          }),
      CssJs.height({
            NAME: "percent",
            VAL: 100
          }),
      CssJs.border({
            NAME: "pxFloat",
            VAL: 1
          }, "solid", {
            NAME: "hex",
            VAL: "636077"
          }),
      CssJs.borderRadius({
            NAME: "pxFloat",
            VAL: 8
          }),
      CssJs.fontSize({
            NAME: "pxFloat",
            VAL: 20
          })
    ]);

function make$1(props) {
  var className = styles$1 + getOrEmpty$1(Caml_option.undefined_to_opt(props.className));
  var stylesObject = {
    className: className,
    ref: Caml_option.undefined_to_opt(props.innerRef)
  };
  var newProps = Object.assign({}, props, stylesObject);
  deleteProp$1(newProps, "innerRef");
  return React.createElement("input", newProps);
}

var Input = {
  deleteProp: deleteProp$1,
  getOrEmpty: getOrEmpty$1,
  styles: styles$1,
  make: make$1
};

var deleteProp$2 = ((newProps, key) => delete newProps[key]);

function getOrEmpty$2(str) {
  if (str !== undefined) {
    return " " + str;
  } else {
    return "";
  }
}

var styles$2 = CssJs.style([
      CssJs.label("Button"),
      CssJs.marginLeft({
            NAME: "pxFloat",
            VAL: 12
          }),
      CssJs.width({
            NAME: "pxFloat",
            VAL: 100
          }),
      CssJs.height({
            NAME: "percent",
            VAL: 100
          }),
      CssJs.backgroundColor({
            NAME: "hex",
            VAL: "382a52"
          }),
      CssJs.borderRadius({
            NAME: "pxFloat",
            VAL: 8
          }),
      CssJs.color({
            NAME: "hex",
            VAL: "dddbe3"
          }),
      CssJs.border({
            NAME: "pxFloat",
            VAL: 1
          }, "solid", {
            NAME: "hex",
            VAL: "636077"
          }),
      CssJs.unsafe("cursor", "pointer"),
      CssJs.fontSize({
            NAME: "pxFloat",
            VAL: 18
          })
    ]);

function make$2(props) {
  var className = styles$2 + getOrEmpty$2(Caml_option.undefined_to_opt(props.className));
  var stylesObject = {
    className: className,
    ref: Caml_option.undefined_to_opt(props.innerRef)
  };
  var newProps = Object.assign({}, props, stylesObject);
  deleteProp$2(newProps, "innerRef");
  return React.createElement("button", newProps);
}

var Button = {
  deleteProp: deleteProp$2,
  getOrEmpty: getOrEmpty$2,
  styles: styles$2,
  make: make$2
};

function TodoInput(Props) {
  var addTodo = Props.addTodo;
  var match = React.useState(function () {
        return "";
      });
  var setTodo = match[1];
  var todo = match[0];
  var onChange = function ($$event) {
    var value = $$event.currentTarget.value;
    setTodo(function (param) {
          return value;
        });
  };
  var onClickAdd = function (param) {
    if (todo !== "") {
      Curry._1(addTodo, todo);
      return setTodo(function (param) {
                  return "";
                });
    }
    
  };
  return React.createElement(make, {
              children: null
            }, React.createElement(make$1, {
                  value: todo,
                  onChange: onChange
                }), React.createElement(make$2, {
                  children: "추가",
                  onClick: onClickAdd
                }));
}

var make$3 = TodoInput;

export {
  getValue ,
  Container ,
  Input ,
  Button ,
  make$3 as make,
}
/* styles Not a pure module */
