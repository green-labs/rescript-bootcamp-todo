// Generated by ReScript, PLEASE EDIT WITH CARE

import * as CssJs from "bs-css-emotion/src/CssJs.mjs";
import * as Curry from "rescript/lib/es6/curry.js";
import * as React from "react";
import * as Belt_Id from "rescript/lib/es6/belt_Id.js";
import * as Belt_Map from "rescript/lib/es6/belt_Map.js";
import * as Caml_obj from "rescript/lib/es6/caml_obj.js";
import * as TodoInput from "./TodoInput.mjs";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as TodoEntity from "../entities/TodoEntity.mjs";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as TodoListItem from "./TodoListItem.mjs";

var deleteProp = ((newProps, key) => delete newProps[key]);

function getOrEmpty(str) {
  if (str !== undefined) {
    return " " + str;
  } else {
    return "";
  }
}

var styles = CssJs.style([
      CssJs.label("Container"),
      CssJs.padding2({
            NAME: "pxFloat",
            VAL: 24
          }, {
            NAME: "pxFloat",
            VAL: 16
          }),
      CssJs.maxWidth({
            NAME: "pxFloat",
            VAL: 500
          })
    ]);

function make(props) {
  var className = styles + getOrEmpty(Caml_option.undefined_to_opt(props.className));
  var stylesObject = {
    className: className,
    ref: Caml_option.undefined_to_opt(props.innerRef)
  };
  var newProps = Object.assign({}, props, stylesObject);
  deleteProp(newProps, "innerRef");
  return React.createElement("div", newProps);
}

var Container = {
  deleteProp: deleteProp,
  getOrEmpty: getOrEmpty,
  styles: styles,
  make: make
};

var deleteProp$1 = ((newProps, key) => delete newProps[key]);

function getOrEmpty$1(str) {
  if (str !== undefined) {
    return " " + str;
  } else {
    return "";
  }
}

var styles$1 = CssJs.style([
      CssJs.label("Title"),
      CssJs.marginBottom({
            NAME: "pxFloat",
            VAL: 16
          }),
      CssJs.fontSize({
            NAME: "pxFloat",
            VAL: 20
          }),
      CssJs.color({
            NAME: "hex",
            VAL: "fff"
          })
    ]);

function make$1(props) {
  var className = styles$1 + getOrEmpty$1(Caml_option.undefined_to_opt(props.className));
  var stylesObject = {
    className: className,
    ref: Caml_option.undefined_to_opt(props.innerRef)
  };
  var newProps = Object.assign({}, props, stylesObject);
  deleteProp$1(newProps, "innerRef");
  return React.createElement("h1", newProps);
}

var Title = {
  deleteProp: deleteProp$1,
  getOrEmpty: getOrEmpty$1,
  styles: styles$1,
  make: make$1
};

var deleteProp$2 = ((newProps, key) => delete newProps[key]);

function getOrEmpty$2(str) {
  if (str !== undefined) {
    return " " + str;
  } else {
    return "";
  }
}

var styles$2 = CssJs.style([
      CssJs.label("Ol"),
      CssJs.margin4({
            NAME: "pxFloat",
            VAL: 24
          }, "zero", "zero", "zero"),
      CssJs.padding("zero")
    ]);

function make$2(props) {
  var className = styles$2 + getOrEmpty$2(Caml_option.undefined_to_opt(props.className));
  var stylesObject = {
    className: className,
    ref: Caml_option.undefined_to_opt(props.innerRef)
  };
  var newProps = Object.assign({}, props, stylesObject);
  deleteProp$2(newProps, "innerRef");
  return React.createElement("ol", newProps);
}

var Ol = {
  deleteProp: deleteProp$2,
  getOrEmpty: getOrEmpty$2,
  styles: styles$2,
  make: make$2
};

var cmp = Caml_obj.compare;

var IntComparator = Belt_Id.MakeComparable({
      cmp: cmp
    });

function App(Props) {
  var match = React.useState(function () {
        return Belt_Map.make(IntComparator);
      });
  var setTodoMap = match[1];
  var handleAddTodo = function (text) {
    Curry._1(setTodoMap, (function (prev) {
            return TodoEntity.add(prev, text);
          }));
  };
  var handleRemoveTodo = function (id) {
    Curry._1(setTodoMap, (function (prev) {
            return TodoEntity.remove(prev, id);
          }));
  };
  var handleUpdateTodo = function (id, payload) {
    Curry._1(setTodoMap, (function (prev) {
            return TodoEntity.update(prev, id, payload);
          }));
  };
  return React.createElement(make, {
              children: null
            }, React.createElement(make$1, {
                  children: "RESCRIPT TO DO"
                }), React.createElement(TodoInput.make, {
                  addTodo: handleAddTodo
                }), React.createElement(make$2, {
                  children: Belt_Array.map(Belt_Map.toArray(match[0]), (function (param) {
                          return React.createElement(TodoListItem.make, {
                                      todo: param[1],
                                      removeTodo: handleRemoveTodo,
                                      updateTodo: handleUpdateTodo,
                                      key: String(param[0])
                                    });
                        }))
                }));
}

var make$3 = App;

export {
  Container ,
  Title ,
  Ol ,
  IntComparator ,
  make$3 as make,
}
/* styles Not a pure module */
