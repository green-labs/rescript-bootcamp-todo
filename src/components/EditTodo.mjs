// Generated by ReScript, PLEASE EDIT WITH CARE

import * as CssJs from "bs-css-emotion/src/CssJs.mjs";
import * as Curry from "rescript/lib/es6/curry.js";
import * as React from "react";
import Rodal from "rodal";
import * as Filter from "../util/Filter.mjs";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";

var deleteProp = ((newProps, key) => delete newProps[key]);

function getOrEmpty(str) {
  if (str !== undefined) {
    return " " + str;
  } else {
    return "";
  }
}

var styles = CssJs.style([
      CssJs.label("Content"),
      CssJs.width({
            NAME: "percent",
            VAL: 100
          }),
      CssJs.height({
            NAME: "percent",
            VAL: 100
          }),
      CssJs.padding2({
            NAME: "pxFloat",
            VAL: 24
          }, {
            NAME: "pxFloat",
            VAL: 16
          }),
      CssJs.display("flex"),
      CssJs.flexDirection("column"),
      CssJs.unsafe("alignItems", "center"),
      CssJs.unsafe("justifyContent", "center"),
      CssJs.boxSizing("borderBox")
    ]);

function make(props) {
  var className = styles + getOrEmpty(Caml_option.undefined_to_opt(props.className));
  var stylesObject = {
    className: className,
    ref: Caml_option.undefined_to_opt(props.innerRef)
  };
  var newProps = Object.assign({}, props, stylesObject);
  deleteProp(newProps, "innerRef");
  return React.createElement("div", newProps);
}

var Content = {
  deleteProp: deleteProp,
  getOrEmpty: getOrEmpty,
  styles: styles,
  make: make
};

var deleteProp$1 = ((newProps, key) => delete newProps[key]);

function getOrEmpty$1(str) {
  if (str !== undefined) {
    return " " + str;
  } else {
    return "";
  }
}

var styles$1 = CssJs.style([
      CssJs.label("Input"),
      CssJs.margin("zero"),
      CssJs.padding2("zero", {
            NAME: "pxFloat",
            VAL: 12
          }),
      CssJs.width({
            NAME: "percent",
            VAL: 100
          }),
      CssJs.height({
            NAME: "pxFloat",
            VAL: 30
          }),
      CssJs.border({
            NAME: "pxFloat",
            VAL: 1
          }, "solid", {
            NAME: "hex",
            VAL: "636077"
          }),
      CssJs.borderRadius({
            NAME: "pxFloat",
            VAL: 8
          }),
      CssJs.fontSize({
            NAME: "pxFloat",
            VAL: 13
          })
    ]);

function make$1(props) {
  var className = styles$1 + getOrEmpty$1(Caml_option.undefined_to_opt(props.className));
  var stylesObject = {
    className: className,
    ref: Caml_option.undefined_to_opt(props.innerRef)
  };
  var newProps = Object.assign({}, props, stylesObject);
  deleteProp$1(newProps, "innerRef");
  return React.createElement("input", newProps);
}

var Input = {
  deleteProp: deleteProp$1,
  getOrEmpty: getOrEmpty$1,
  styles: styles$1,
  make: make$1
};

var deleteProp$2 = ((newProps, key) => delete newProps[key]);

function getOrEmpty$2(str) {
  if (str !== undefined) {
    return " " + str;
  } else {
    return "";
  }
}

var styles$2 = CssJs.style([
      CssJs.label("Flex"),
      CssJs.marginTop({
            NAME: "pxFloat",
            VAL: 16
          }),
      CssJs.width({
            NAME: "percent",
            VAL: 100
          }),
      CssJs.display("flex"),
      CssJs.unsafe("alignItems", "center"),
      CssJs.unsafe("justifyContent", "center"),
      CssJs.unsafe("gap", "8px")
    ]);

function make$2(props) {
  var className = styles$2 + getOrEmpty$2(Caml_option.undefined_to_opt(props.className));
  var stylesObject = {
    className: className,
    ref: Caml_option.undefined_to_opt(props.innerRef)
  };
  var newProps = Object.assign({}, props, stylesObject);
  deleteProp$2(newProps, "innerRef");
  return React.createElement("div", newProps);
}

var Flex = {
  deleteProp: deleteProp$2,
  getOrEmpty: getOrEmpty$2,
  styles: styles$2,
  make: make$2
};

var deleteProp$3 = ((newProps, key) => delete newProps[key]);

function getOrEmpty$3(str) {
  if (str !== undefined) {
    return " " + str;
  } else {
    return "";
  }
}

var styles$3 = CssJs.style([
      CssJs.label("Button"),
      CssJs.backgroundColor({
            NAME: "hex",
            VAL: "382a52"
          }),
      CssJs.borderRadius({
            NAME: "pxFloat",
            VAL: 4
          }),
      CssJs.color({
            NAME: "hex",
            VAL: "dddbe3"
          }),
      CssJs.border({
            NAME: "pxFloat",
            VAL: 1
          }, "solid", {
            NAME: "hex",
            VAL: "636077"
          }),
      CssJs.unsafe("cursor", "pointer"),
      CssJs.padding2({
            NAME: "pxFloat",
            VAL: 4
          }, {
            NAME: "pxFloat",
            VAL: 8
          })
    ]);

function make$3(props) {
  var className = styles$3 + getOrEmpty$3(Caml_option.undefined_to_opt(props.className));
  var stylesObject = {
    className: className,
    ref: Caml_option.undefined_to_opt(props.innerRef)
  };
  var newProps = Object.assign({}, props, stylesObject);
  deleteProp$3(newProps, "innerRef");
  return React.createElement("button", newProps);
}

var Button = {
  deleteProp: deleteProp$3,
  getOrEmpty: getOrEmpty$3,
  styles: styles$3,
  make: make$3
};

function EditTodo(Props) {
  var defaultValue = Props.defaultValue;
  var visible = Props.visible;
  var close = Props.close;
  var save = Props.save;
  var match = React.useState(function () {
        return defaultValue;
      });
  var setValue = match[1];
  var value = match[0];
  var onChange = function (e) {
    var v = e.currentTarget.value;
    Curry._1(setValue, (function (param) {
            return v;
          }));
  };
  var submit = function (e) {
    e.preventDefault();
    Belt_Option.map(Filter.emptyStr(value), save);
    Curry._1(close, undefined);
  };
  return React.createElement(Rodal, {
              visible: visible,
              onClose: close,
              children: React.createElement(make, {
                    children: React.createElement("form", {
                          onSubmit: submit
                        }, React.createElement(make$1, {
                              value: value,
                              onChange: onChange
                            }), React.createElement(make$2, {
                              children: null
                            }, React.createElement(make$3, {
                                  children: "취소",
                                  onClick: (function (param) {
                                      Curry._1(close, undefined);
                                    })
                                }), React.createElement(make$3, {
                                  children: "저장",
                                  type: "submit"
                                })))
                  })
            });
}

var make$4 = EditTodo;

export {
  Content ,
  Input ,
  Flex ,
  Button ,
  make$4 as make,
}
/* styles Not a pure module */
