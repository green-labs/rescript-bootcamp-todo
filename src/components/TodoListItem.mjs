// Generated by ReScript, PLEASE EDIT WITH CARE

import * as CssJs from "bs-css-emotion/src/CssJs.mjs";
import * as Curry from "rescript/lib/es6/curry.js";
import * as React from "react";
import * as EditTodo from "./EditTodo.mjs";
import * as Caml_option from "rescript/lib/es6/caml_option.js";

var deleteProp = ((newProps, key) => delete newProps[key]);

function getOrEmpty(str) {
  if (str !== undefined) {
    return " " + str;
  } else {
    return "";
  }
}

var styles = CssJs.style([
      CssJs.label("Container"),
      CssJs.marginTop({
            NAME: "pxFloat",
            VAL: 8
          }),
      CssJs.display("flex"),
      CssJs.unsafe("alignItems", "center"),
      CssJs.unsafe("justifyContent", "space-between"),
      CssJs.color({
            NAME: "hex",
            VAL: "dddbe3"
          }),
      CssJs.unsafe("gap", "8px")
    ]);

function make(props) {
  var className = styles + getOrEmpty(Caml_option.undefined_to_opt(props.className));
  var stylesObject = {
    className: className,
    ref: Caml_option.undefined_to_opt(props.innerRef)
  };
  var newProps = Object.assign({}, props, stylesObject);
  deleteProp(newProps, "innerRef");
  return React.createElement("li", newProps);
}

var Container = {
  deleteProp: deleteProp,
  getOrEmpty: getOrEmpty,
  styles: styles,
  make: make
};

var deleteProp$1 = ((newProps, key) => delete newProps[key]);

function getOrEmpty$1(str) {
  if (str !== undefined) {
    return " " + str;
  } else {
    return "";
  }
}

var styles$1 = CssJs.style([
      CssJs.label("Content"),
      CssJs.display("flex"),
      CssJs.unsafe("alignItems", "center"),
      CssJs.unsafe("cursor", "pointer"),
      CssJs.flexGrow(1)
    ]);

function make$1(props) {
  var className = styles$1 + getOrEmpty$1(Caml_option.undefined_to_opt(props.className));
  var stylesObject = {
    className: className,
    ref: Caml_option.undefined_to_opt(props.innerRef)
  };
  var newProps = Object.assign({}, props, stylesObject);
  deleteProp$1(newProps, "innerRef");
  return React.createElement("div", newProps);
}

var Content = {
  deleteProp: deleteProp$1,
  getOrEmpty: getOrEmpty$1,
  styles: styles$1,
  make: make$1
};

var deleteProp$2 = ((newProps, key) => delete newProps[key]);

function getOrEmpty$2(str) {
  if (str !== undefined) {
    return " " + str;
  } else {
    return "";
  }
}

var styles$2 = CssJs.style([
      CssJs.label("Id"),
      CssJs.marginRight({
            NAME: "pxFloat",
            VAL: 8
          }),
      CssJs.width({
            NAME: "pxFloat",
            VAL: 30
          }),
      CssJs.height({
            NAME: "pxFloat",
            VAL: 30
          }),
      CssJs.borderRadius({
            NAME: "pxFloat",
            VAL: 8
          }),
      CssJs.backgroundColor({
            NAME: "hex",
            VAL: "3e3264"
          }),
      CssJs.display("flex"),
      CssJs.unsafe("justifyContent", "center"),
      CssJs.unsafe("alignItems", "center")
    ]);

function make$2(props) {
  var className = styles$2 + getOrEmpty$2(Caml_option.undefined_to_opt(props.className));
  var stylesObject = {
    className: className,
    ref: Caml_option.undefined_to_opt(props.innerRef)
  };
  var newProps = Object.assign({}, props, stylesObject);
  deleteProp$2(newProps, "innerRef");
  return React.createElement("span", newProps);
}

var Id = {
  deleteProp: deleteProp$2,
  getOrEmpty: getOrEmpty$2,
  styles: styles$2,
  make: make$2
};

var deleteProp$3 = ((newProps, key) => delete newProps[key]);

function getOrEmpty$3(str) {
  if (str !== undefined) {
    return " " + str;
  } else {
    return "";
  }
}

var styles$3 = CssJs.style([
      CssJs.label("TodoTitle"),
      CssJs.display("flex"),
      CssJs.flexGrow(1)
    ]);

function make$3(props) {
  var className = styles$3 + getOrEmpty$3(Caml_option.undefined_to_opt(props.className));
  var stylesObject = {
    className: className,
    ref: Caml_option.undefined_to_opt(props.innerRef)
  };
  var newProps = Object.assign({}, props, stylesObject);
  deleteProp$3(newProps, "innerRef");
  return React.createElement("div", newProps);
}

var TodoTitle = {
  deleteProp: deleteProp$3,
  getOrEmpty: getOrEmpty$3,
  styles: styles$3,
  make: make$3
};

var deleteProp$4 = ((newProps, key) => delete newProps[key]);

function getOrEmpty$4(str) {
  if (str !== undefined) {
    return " " + str;
  } else {
    return "";
  }
}

var styles$4 = CssJs.style([
      CssJs.label("DoneTitle"),
      CssJs.display("flex"),
      CssJs.flexGrow(1),
      CssJs.textAlign("left"),
      CssJs.unsafe("textDecorationLine", "line-through")
    ]);

function make$4(props) {
  var className = styles$4 + getOrEmpty$4(Caml_option.undefined_to_opt(props.className));
  var stylesObject = {
    className: className,
    ref: Caml_option.undefined_to_opt(props.innerRef)
  };
  var newProps = Object.assign({}, props, stylesObject);
  deleteProp$4(newProps, "innerRef");
  return React.createElement("div", newProps);
}

var DoneTitle = {
  deleteProp: deleteProp$4,
  getOrEmpty: getOrEmpty$4,
  styles: styles$4,
  make: make$4
};

var deleteProp$5 = ((newProps, key) => delete newProps[key]);

function getOrEmpty$5(str) {
  if (str !== undefined) {
    return " " + str;
  } else {
    return "";
  }
}

var styles$5 = CssJs.style([
      CssJs.label("Button"),
      CssJs.backgroundColor({
            NAME: "hex",
            VAL: "382a52"
          }),
      CssJs.borderRadius({
            NAME: "pxFloat",
            VAL: 4
          }),
      CssJs.color({
            NAME: "hex",
            VAL: "dddbe3"
          }),
      CssJs.border({
            NAME: "pxFloat",
            VAL: 1
          }, "solid", {
            NAME: "hex",
            VAL: "636077"
          }),
      CssJs.unsafe("cursor", "pointer")
    ]);

function make$5(props) {
  var className = styles$5 + getOrEmpty$5(Caml_option.undefined_to_opt(props.className));
  var stylesObject = {
    className: className,
    ref: Caml_option.undefined_to_opt(props.innerRef)
  };
  var newProps = Object.assign({}, props, stylesObject);
  deleteProp$5(newProps, "innerRef");
  return React.createElement("button", newProps);
}

var Button = {
  deleteProp: deleteProp$5,
  getOrEmpty: getOrEmpty$5,
  styles: styles$5,
  make: make$5
};

function TodoListItem(Props) {
  var todo = Props.todo;
  var removeTodo = Props.removeTodo;
  var updateTodo = Props.updateTodo;
  var status = todo.status;
  var text = todo.text;
  var id = todo.id;
  var match = React.useState(function () {
        return false;
      });
  var setShowEditor = match[1];
  return React.createElement(React.Fragment, undefined, React.createElement(make, {
                  children: null
                }, React.createElement(make$1, {
                      children: null,
                      onClick: (function (param) {
                          Curry._2(updateTodo, id, {
                                id: id,
                                text: text,
                                status: status ? /* ToDo */0 : /* Done */1
                              });
                        })
                    }, React.createElement(make$2, {
                          children: String(id)
                        }), status ? React.createElement(make$4, {
                            children: text
                          }) : React.createElement(make$3, {
                            children: text
                          })), React.createElement(make$5, {
                      children: "수정",
                      onClick: (function (param) {
                          Curry._1(setShowEditor, (function (param) {
                                  return true;
                                }));
                        })
                    }), React.createElement(make$5, {
                      children: "삭제",
                      onClick: (function (param) {
                          Curry._1(removeTodo, id);
                        })
                    })), React.createElement(EditTodo.make, {
                  defaultValue: text,
                  visible: match[0],
                  close: (function (param) {
                      Curry._1(setShowEditor, (function (param) {
                              return false;
                            }));
                    }),
                  save: (function (v) {
                      Curry._2(updateTodo, id, {
                            id: id,
                            text: v,
                            status: status
                          });
                    }),
                  key: text
                }));
}

var make$6 = TodoListItem;

export {
  Container ,
  Content ,
  Id ,
  TodoTitle ,
  DoneTitle ,
  Button ,
  make$6 as make,
}
/* styles Not a pure module */
